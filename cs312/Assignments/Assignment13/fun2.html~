<!DOCTYPE html>
<html>
<head>
<title>Draw Triangles Part 2</title>
</head>

<body bgcolor="black">
   <canvas id="canvas1" width="500" height="300" style="border-style:solid;border-width:1px;border-color:white" >
      Get a Real Browser that supports HTML5
   </canvas></br>
   
   <script language="JavaScript" src="MatrixMath.js"></script>
   <script language="JavaScript" src="SmoothShaders.js"></script>
   <script language="JavaScript" src="RenderBuffer.js"></script>
   <script language="JavaScript" src="Line.js"></script>
   <script language="JavaScript" src="RenderEngine.js"></script>
   <script language="JavaScript" src="ProjectionMatrix.js"></script>
   
   <script>
      var renderBuffer = new RenderBuffer("canvas1");
         
      // Hardcode the list of vertices with the position at 0 and the color at 1
      var positionIdx = 0;
      var colorIdx = 1;
      var point1 = [100, 0, 0, 1];
      var point2 = multiplyVector(getRotationMatrix(-360 * 1 / 5), point1);
      var point3 = multiplyVector(getRotationMatrix(-360 * 2 / 5), point1);
      var point4 = multiplyVector(getRotationMatrix(-360 * 3 / 5), point1);
      var point5 = multiplyVector(getRotationMatrix(-360 * 4 / 5), point1);
      var verts = [
         [point1, [1.0, 0.0, 0.0, 1.0]], // red
         [point2, [1.0, 1.0, 0.0, 1.0]], // yellow
         [point3, [0.0, 1.0, 0.0, 1.0]], // green
         [point4, [0.0, 0.0, 1.0, 1.0]], // blue
         [point5, [1.0, 0.0, 1.0, 1.0]]  // magenta
      ];

      
      var indexListTris = [0, 1, 2, 2, 3, 4, 4, 0, 2];
      var renderEngine = new RenderEngine(renderBuffer);
      var aspectRatio = renderBuffer.width / renderBuffer.height;
      projMatrix = OrthoGraphicProjection(-250, 250, 250, -250, -1, 1); 
      var fragmentShader = new SmoothColorFragShader();

      var degree = 0;
      timer = function()
      {
         degree = (degree + .5) % 360;
         var rotationMatrix = getRotationMatrix(degree);
         var matrix = multiply4by4(rotationMatrix, projMatrix);
         var vertexShader = new MatrixSmoothVertShader(positionIdx, colorIdx, matrix);
         renderEngine.setBackground([0, 0, 0, 1]);
         renderEngine.drawTriangles(verts, indexListTris, clockwiseWinding, vertexShader, fragmentShader);
         renderBuffer.flush();
      }

      window.setInterval(timer, 1);

   </script>
</body>
</html>
