#include "ArcUtils.h"
#include <math.h>
//#include <time.h>
#include <GL/glew.h>
#include <stdlib>
#include <stdio>

const Matrix IDENTITY_MATRIX = {{
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
}};

float Cotangent(float angle)
{
  return (float)(1.0 / tan(angle));
}

float DegreesToRadians(float degrees)
{
  return degrees * (float)(PI / 180);
}

float RadiansToDegrees(float radians)
{
  return radians * (float)(180 / PI);
}

Matrix MultiplyMatrices(const Matrix* m1, const Matrix* m2)
{
  Matrix out = IDENTITY_MATRIX;
  unsigned int row, column, rowOffset;

  for (row = 0, rowOffset = row * 4; row < 4; ++row, rowOffset = row * 4)
    for (column = 0; column < 4; ++column)
      out.m[rowOffset + column] =
	(m1->m[rowOffset + 0] * m2->m[column +  0]) +
	(m1->m[rowOffset + 1] * m2->m[column +  4]) +
	(m1->m[rowOffset + 2] * m2->m[column +  8]) +
	(m1->m[rowOffset + 3] * m2->m[column + 12]);

  return out;
}

void ScaleMatrix(Matrix* m, float x, float y, float z)
{
  Matrix scale = IDENTITY_MATRIX;

  scale.m[0]  = x;
  scale.m[5]  = y;
  scale.m[10] = z;

  //memcpy(m->m, MultiplyMatrices(m, &scale).m, sizeof(m->m));
  *m = MultiplyMatrices(m, &scale);
}

void TranslateMatrix(Matrix* m, float x, float y, float z)
{
  Matrix translation = IDENTITY_MATRIX;
  
  translation.m[12] = x;
  translation.m[13] = y;
  translation.m[14] = z;

  *m = MultiplyMatrices(m, &translation);
}

void RotateAboutX(Matrix* m, float angle)
{
  Matrix rotation = IDENTITY_MATRIX;
  float sine = (float)sin(angle);
  float cosine = (float)cos(angle);

  rotation.m[5]  = cosine;
  rotation.m[6]  = -sine;
  rotation.m[9]  = sine;
  rotation.m[10] = cosine;

  //memcpy(m->m, MultiplyMatrices(m, &rotation).m, sizeof(m->m));
  *m = MultiplyMatrices(m, &rotation);
}

void RotateAboutY(Matrix* m, float angle)
{
  Matrix rotation = IDENTITY_MATRIX;
  float sine = (float)sin(angle);
  float cosine = (float)cos(angle);

  rotation.m[0]  = cosine;
  rotation.m[8]  = sine;
  rotation.m[2]  = -sine;
  rotation.m[10] = cosine;

  //memcpy(m->m, MultiplyMatrices(m, &rotation).m, sizeof(m->m));
  *m = MultiplyMatrices(m, &rotation);
}

void RotateAboutZ(Matrix* m, float angle)
{
  Matrix rotation = IDENTITY_MATRIX;
  float sine = (float)sin(angle);
  float cosine = (float)cos(angle);

  rotation.m[0] = cosine;
  rotation.m[1] = -sine;
  rotation.m[4] = sine;
  rotation.m[5] = cosine;

  //memcpy(m->m, MultiplyMatrices(m, &rotation).m, sizeof(m->m));
  *m = MultiplyMatrices(m, &rotation);
}

Matrix CreateProjectionMatrix(float fovy,
			        float aspectRatio,
			        float nearPlane,
			        float farPlane
			        )
{
  Matrix out = {{0}};
  const float
    yScale = Cotangent(DegreesToRadians(fovy / 2)),
    xScale = yScale / aspectRatio,
    frustumLength = farPlane - nearPlane;

  out.m[0]  = xScale;
  out.m[5]  = yScale;
  out.m[10] = -((farPlane + nearPlane) / frustumLength);
  out.m[11] = -1;
  out.m[14] = -((2 * nearPlane * farPlane) / frustumLength);

  return out;
}
			      
void ExitOnGLError(const char* errorMessage)
{
  const GLenum ErrorValue = glGetError();

  if (ErrorValue != GL_NO_ERROR)
  {
    fprintf(stderr, "%s: %s\n", errorMessage, gluErrorString(ErrorValue));
    exit(EXIT_FAILURE);
  }
}

GLuint LoadShader(const char* filename, GLenum shaderType)
{
  GLuint shaderID = 0;
  FILE* file;
  long fileSize = -1;
  char* glslSource;

  if (NULL != (file = fopen(filename, "rb")) &&
      0 == fseek(file, 0, SEEK_END) &&
      -1 != (fileSize = ftell(file)))
  {
    rewind(file);

    if (NULL != (glslSource = (char*)malloc(fileSize + 1)))
    {
      if (fileSize == (long)fread(glslSource, sizeof(char), fileSize, file))
      {
	glslSource[fileSize] = '\0';

	if (0 != (shaderID = glCreateShader(shaderType)))
	  {                            // Must be cast
	  glShaderSource(shaderID, 1, (const char **)&glslSource, NULL);
	  glCompileShader(shaderID);
	  ExitOnGLError("Could not compile a shader");
	}
	else
	  fprintf(stderr, "ERROR: Could not create a shader.\n");
      }
      else
	fprintf(stderr, "ERROR: Could not read file %s\n", filename);

      free(glslSource);
    }
    else
      fprintf(stderr, "ERROR: Could not allocate %i bytes.\n", (int)fileSize);

    fclose(file);
  }
  else
  {
    if (NULL != file)
      fclose(file);
    fprintf(stderr, "ERROR: Could not open file %s\n", filename);
  }

  return shaderID;
}
